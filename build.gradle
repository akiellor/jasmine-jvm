buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/groups/public"}
        maven {
            name 'Gradle Shadow'
            url 'http://dl.bintray.com/content/johnrengelman/gradle-plugins'
        }
    }
    dependencies {
        classpath 'org.gradle.plugins:shadow:0.7.4'
        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}

apply plugin: 'release'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'shadow'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
  maven {
      url './repository'
  }
  mavenCentral()
}

group = 'com.github.akiellor.jasmine'

dependencies {
  compile 'org.dynjs:dynjs:0.1.2-SNAPSHOT'
  compile 'org.projectodd.rephract:rephract:1.0.1-SNAPSHOT'
  compile 'com.google.guava:guava:11.0.2'

  testCompile 'org.javafunk.funk:funk-core:0.1.22'
  testCompile 'junit:junit-dep:4.11'
  testCompile 'org.easytesting:fest:1.0.16'
  testCompile 'org.mockito:mockito-all:1.9.5'
}

sourceSets {
  main {
    resources {
      srcDir  'src/main/javascript'
    }
  }

  test {
    resources {
      srcDir  'src/test/javascript'
    }
  }
}


task(binscripts) << {
    buildDir.mkdirs();
    def dynjsBinScript = file("$buildDir/dynjs")
    dynjsBinScript.setExecutable(true, false)
    dynjsBinScript.write("""\
#!/bin/sh -e

java -cp ${configurations.compile.files.join(":")} org.dynjs.cli.Main \$@
""")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

release {
    failOnSnapshotDependencies = false
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

def isReleaseVersion() {
    return !version.endsWith("SNAPSHOT")
}

signing {
    required { isReleaseVersion() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

createReleaseTag.dependsOn uploadArchives

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment ->
                signing.signPom(deployment)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                if(project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")){
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }

            pom.project {
                name 'jasmine'
                packaging 'jar'
                description 'A jasmine runner using the dynjs javascript runtime'
                url 'http://github.com/akiellor/jasmine-jvm'

                scm {
                    url 'scm:git@github.com:akiellor/jasmine-jvm.git'
                    connection 'scm:git@github.com:akiellor/jasmine-jvm.git'
                    developerConnection 'scm:git@github.com:akiellor/jasmine-jvm.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'akiellor'
                        name 'Andrew Kiellor'
                    }
                }
            }
        }
    }
}